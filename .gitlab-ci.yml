# SPDX-License-Identifier: CC0-1.0
# SPDX-FileCopyrightText: 2023 Collabora, Ltd.

variables:
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - build
  - analyze
  - release
  - evaluate

cache:
  paths:
    - ccache

.ccache:
  before_script:
    - export CCACHE_BASEDIR="$PWD"
    - export CCACHE_DIR="$PWD/ccache"
    - export CCACHE_COMPILERCHECK=content
    - ccache --zero-stats || true
    - ccache --show-stats || true
  after_script:
    - export CCACHE_DIR="$PWD/ccache"
    - ccache --show-stats -v

gcc-ubuntu-2204:
  extends: .ccache
  image: registry.freedesktop.org/mateosss/basalt:ubuntu2204
  stage: build
  when: manual
  script:
    - echo BUILD_UBUNTU_2204_JOB_ID=$CI_JOB_ID >> release.env
    - cmake --preset=ci
    - time cmake --build build
    - cd build && cpack
    - mv *.deb ../basalt-monado-ubuntu-22.04-haswell-amd64.deb
  artifacts:
    name: basalt-monado-ubuntu-22.04-haswell-amd64
    expose_as: "basalt-monado-ubuntu-2204-haswell-amd64-deb"
    paths:
      - "basalt-monado-ubuntu-22.04-haswell-amd64.deb"
    reports:
      dotenv: release.env

gcc-ubuntu-2404-wtest:
  extends: .ccache
  image: registry.freedesktop.org/mateosss/basalt:ubuntu2404
  stage: build
  when: manual
  script:
    - echo BUILD_UBUNTU_2404_JOB_ID=$CI_JOB_ID >> release.env
    - cmake --preset=ci-test
    - time cmake --build build
    - ctest --output-on-failure --test-dir build
    - cd build && cpack
    - mv *.deb ../basalt-monado-ubuntu-24.04-haswell-amd64.deb
  artifacts:
    name: basalt-monado-ubuntu-24.04-haswell-amd64
    expose_as: "basalt-monado-ubuntu-2404-haswell-amd64-deb"
    paths:
      - "basalt-monado-ubuntu-24.04-haswell-amd64.deb"
    reports:
      dotenv: release.env

clang19-ubuntu-2404:
  extends: .ccache
  image: registry.freedesktop.org/mateosss/basalt:ubuntu2404
  stage: build
  when: manual
  script:
    - apt-get update && apt-get install -y clang-19
    - export CC=clang-19 CXX=clang++-19
    - cmake --preset=ci
    - time cmake --build build

clangd-tidy-delta:
  stage: analyze
  image: registry.freedesktop.org/mateosss/basalt:ubuntu2404
  when: manual
  script:
    - git fetch origin $CI_DEFAULT_BRANCH
    - cmake -B build
    - git diff origin/$CI_DEFAULT_BRANCH --exit-code || IN_MR=$?
    - (( $IN_MR )) && COMPARISON_BRANCH=origin/$CI_DEFAULT_BRANCH || COMPARISON_BRANCH=HEAD~1
    - echo $COMPARISON_BRANCH
    - source /venv/bin/activate
    - git diff $COMPARISON_BRANCH --name-only | xargs clangd-tidy --clangd-executable=/clangd/bin/clangd -p build -j $(nproc) --github --color always

format:
  stage: analyze
  image: registry.freedesktop.org/mateosss/basalt:ubuntu2404
  when: manual
  script:
    - ./scripts/format.sh
    - git diff --exit-code

release:
  stage: release
  image: registry.freedesktop.org/mateosss/basalt:ubuntu2204
  when: manual
  script:
    - echo "Releasing artifacts of previous jobs"
    - curl --location --output /usr/local/bin/release-cli "https://gitlab.com/api/v4/projects/gitlab-org%2Frelease-cli/packages/generic/release-cli/latest/release-cli-linux-amd64"
    - chmod +x /usr/local/bin/release-cli
  needs: ["gcc-ubuntu-2204", "gcc-ubuntu-2404-wtest"]
  release:
    name: "Release of $CI_COMMIT_SHORT_SHA"
    tag_name: "release-$CI_COMMIT_SHORT_SHA"
    description: "Release of Monado's Basalt for $CI_COMMIT_SHORT_SHA"
    assets:
      links:
        - name: "Ubuntu 22.04 .deb (amd64, -march=haswell)"
          url: "https://gitlab.freedesktop.org/mateosss/basalt/-/jobs/${BUILD_UBUNTU_2204_JOB_ID}/artifacts/raw/basalt-monado-ubuntu-22.04-haswell-amd64.deb"
          link_type: package
        - name: "Ubuntu 24.04 .deb (amd64, -march=haswell)"
          url: "https://gitlab.freedesktop.org/mateosss/basalt/-/jobs/${BUILD_UBUNTU_2404_JOB_ID}/artifacts/raw/basalt-monado-ubuntu-24.04-haswell-amd64.deb"
          link_type: package

create-evaluation:
  stage: evaluate
  when: manual
  tags: [basalt-evaluation]
  variables:
    EVALSETS: "quickset1"
    DETERMINISTIC: "1"
  script:
    - echo "Generating evaluation pipeline for evalsets $EVALSETS"
    - .ci/cievalgen.py --deterministic $DETERMINISTIC .ci/evaluation.json $EVALSETS .ci/cieval.template.yaml .ci/cieval.yaml
  artifacts:
    paths:
      - .ci/cieval.yaml

do-evaluation:
  stage: evaluate
  needs: ["create-evaluation"]
  trigger:
    include:
      - artifact: .ci/cieval.yaml
        job: create-evaluation
    strategy: depend

get-results:
  stage: evaluate
  tags: [basalt-evaluation]
  needs: ["do-evaluation"]
  script:
    - >
      if [ -n "$READ_PROJECT_TOKEN" ]; then
        echo "Using READ_PROJECT_TOKEN to access the API";
        export AUTH="Authorization: Bearer ${READ_PROJECT_TOKEN}"
      else
        echo "READ_PROJECT_TOKEN is not set, job will only work if repo is public";
        export AUTH=""
      fi
    - curl -H "$AUTH" -s "${CI_SERVER_URL}/api/v4/projects/${CI_PROJECT_ID}/pipelines/${CI_PIPELINE_ID}/bridges" > output.json
    - export EVAL_PIPELINE_ID=$(cat output.json | jq '.[] | select(.name=="do-evaluation") | .downstream_pipeline.id')
    - echo $EVAL_PIPELINE_ID
    - curl -H "$AUTH" -s "${CI_SERVER_URL}/api/v4/projects/${CI_PROJECT_ID}/pipelines/${EVAL_PIPELINE_ID}/jobs" > output.json
    - export ZIP_JOB_ID=$(cat output.json | jq -r '.[] | select(.name=="zip") | .id')
    - echo $ZIP_JOB_ID
    - curl -H "$AUTH" -L --output artifacts.zip "${CI_SERVER_URL}/api/v4/projects/${CI_PROJECT_ID}/jobs/${ZIP_JOB_ID}/artifacts"
    - unzip -o artifacts.zip # Generates results.zip
  artifacts:
    name: "results"
    paths:
      - results.zip

report:
  stage: evaluate
  tags: [basalt-evaluation]
  needs: [get-results]
  script:
    - export xrtmet=/storage/local/ssd/mayom/Documents/projects/xrtslam-metrics
    - source $xrtmet/.venv/bin/activate
    - unzip -o results.zip
    - $xrtmet/batch.py results $xrtmet/test/data/targets --metrics ate rte --save_file batch.json > metrics.md
    - zip batch.zip batch.json
  artifacts:
    name: results
    expose_as: "Results and metrics"
    paths:
      - results.zip
      - metrics.md
      - batch.zip
